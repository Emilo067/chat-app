{"version":3,"file":"static/js/828.f922bf2f.chunk.js","mappings":"wPAYaA,EAA8B,SAACC,GAExC,IAAOC,EAAYD,EAAZC,GAAIC,EAAQF,EAARE,KAEX,OACI,UAACC,EAAD,YACI,SAACC,EAAA,EAAD,CAAQC,IAAKC,KACb,SAAC,KAAD,CAASC,GAAE,mBAAcN,GAAzB,SAAgCC,QAOtCC,EAAaK,EAAAA,GAAAA,IAAH,8CCpBHC,EAAgC,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAC3C,OAAO,SAACC,EAAD,UAAgBD,KAGrBC,EAAgBH,EAAAA,GAAAA,IAAH,wB,uCCQbI,GAAeC,EAAAA,EAAAA,GAAU,KAezBC,GAAkBC,EAAAA,EAAAA,GAA0B,CAC9CC,KAAM,UADcD,EAbwC,SAACf,GAE7D,OAAO,kBAAMiB,SAAUjB,EAAMkB,aAAtB,WACH,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EACXC,QAAQ,QACRpB,KAAM,uBACNqB,SAAU,CAACC,EAAAA,EAAUZ,GACrBa,YAAa,wBAEpB,mBAAQC,MAAO,CAACC,QAAS,QAASC,MAAO,SAAzC,wBAsCR,EA9BqC,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,YAG1CC,EAAeF,EAAYG,QAAQC,KAAI,SAAAC,GACzC,OAAO,SAACnC,EAAD,CAAwBE,GAAIiC,EAAEjC,GAAIC,KAAMgC,EAAEhC,MAAxBgC,EAAEjC,OAIzBkC,EAAWN,EAAYM,SAASF,KAAI,SAAAG,GACtC,OAAO,SAAC3B,EAAD,CAAoBC,KAAM0B,EAAEC,SAAdD,EAAEnC,OAM3B,OACI,UAACqC,EAAD,YACI,SAACC,EAAD,UACKR,KAEL,UAACS,EAAD,WACKL,GACD,0BACI,SAACrB,EAAD,CAAiBG,SAZX,SAACwB,GACnBX,EAAYW,EAAWC,kCAoBzBJ,EAAgB9B,EAAAA,GAAAA,IAAH,gFAMb+B,EAAqB/B,EAAAA,GAAAA,IAAH,0EAMlBgC,EAAiBhC,EAAAA,GAAAA,IAAH,0B,8DCxEdmC,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SCmB3B,OAAeE,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAdJ,SAAyBJ,GACrB,MAAO,CACHf,YAAae,EAAMf,gBAI3B,SAA4BoB,GACxB,MAAO,CACHnB,YAAa,SAACoB,GAAD,OAAsBD,GAASE,EAAAA,EAAAA,GAAcD,UDVlC,SAAKE,GAUjC,OAAOJ,EAAAA,EAAAA,IAAQL,EAARK,EATmB,SAAChD,GAEMA,EAAxB6C,OAAL,IAAgBQ,GAAhB,OAA6BrD,EAA7B,GAEA,OAAIA,EAAM6C,QACH,SAACO,GAAD,UAAeC,KADG,SAAC,KAAD,CAAU9C,GAAI,gBCU/C,CAGE+C","sources":["layout/content/dialogs/dialogsItem/DialogItem.tsx","layout/content/dialogs/message/Message.tsx","layout/content/dialogs/Dialogs.tsx","common/hoc/WithAuthRedirect.tsx","layout/content/dialogs/DialogsContainer.tsx"],"sourcesContent":["import React, {FC} from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport {Avatar} from \"../../../../common/components/Avatar/Avatar\";\r\nimport ava from '../../../../assets/img/avatarkaPost.png'\r\n\r\nexport type DialogItem = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\n\r\nexport const DialogsItem: FC<DialogItem> = (props) => {\r\n\r\n    const {id, name} = props;\r\n\r\n    return (\r\n        <StyledItem>\r\n            <Avatar img={ava}/>\r\n            <NavLink to={`/dialogs/${id}`}>{name}</NavLink>\r\n        </StyledItem>\r\n    )\r\n\r\n}\r\n\r\n\r\nconst StyledItem = styled.div`\r\n  padding-left: 5px;\r\n`","import React, {FC} from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ntype MessagePropsType = {\r\n    text: string\r\n}\r\nexport const Message: FC<MessagePropsType> = ({text}) => {\r\n    return <StyledMessage>{text}</StyledMessage>\r\n}\r\n\r\nconst StyledMessage = styled.div`\r\n`\r\n","import React, {FC} from 'react';\r\nimport styled from \"styled-components\";\r\nimport {DialogsItem} from \"./dialogsItem/DialogItem\";\r\nimport {Message} from \"./message/Message\";\r\nimport {DialogsPageType} from \"../../../redux/dialogs-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLength, required} from \"../../../common/utils/validators\";\r\nimport {FormControl} from \"../../../common/components/FormsControls/FormsControls\";\r\n\r\ntype DialogPropsType = {\r\n    dialogsPage: DialogsPageType\r\n    sendMessage: (newMessage: string) => void\r\n}\r\n\r\ntype FormDialogType = {\r\n    updateNewMessageBody: string\r\n}\r\n\r\nconst maxLength100 = maxLength(100)\r\n\r\nconst FormDialog: React.FC<InjectedFormProps<FormDialogType>> = (props) => {\r\n\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <Field component={FormControl}\r\n               tagName=\"input\"\r\n               name={\"updateNewMessageBody\"}\r\n               validate={[required, maxLength100]}\r\n               placeholder={\"Enter your message\"}\r\n        />\r\n        <button style={{display: 'block', float: 'right'}}>Send</button>\r\n    </form>\r\n}\r\n\r\nconst FormReduxDialog = reduxForm<FormDialogType>({\r\n    form: \"dialog\"\r\n})(FormDialog)\r\n\r\nconst Dialogs: FC<DialogPropsType> = ({dialogsPage, sendMessage}) => {\r\n\r\n\r\n    const dialogsItems = dialogsPage.dialogs.map(d => {\r\n        return <DialogsItem key={d.id} id={d.id} name={d.name}/>\r\n    })\r\n\r\n\r\n    const messages = dialogsPage.messages.map(m => {\r\n        return <Message key={m.id} text={m.message}/>\r\n    })\r\n    const onSendMessage = (formValues: FormDialogType) => {\r\n        sendMessage(formValues.updateNewMessageBody)\r\n    }\r\n\r\n    return (\r\n        <StyledDialogs>\r\n            <StyledDialogsNames>\r\n                {dialogsItems}\r\n            </StyledDialogsNames>\r\n            <StyledMessages>\r\n                {messages}\r\n                <div>\r\n                    <FormReduxDialog onSubmit={onSendMessage}/>\r\n                </div>\r\n            </StyledMessages>\r\n        </StyledDialogs>\r\n    );\r\n};\r\n\r\nexport default Dialogs;\r\n\r\nconst StyledDialogs = styled.div`\r\n  display: grid;\r\n\r\n  grid-template-columns: 4fr 10fr;\r\n`\r\n\r\nconst StyledDialogsNames = styled.div`\r\n  width: 250px;\r\n  border-right: 1px solid gray;\r\n`\r\n\r\n\r\nconst StyledMessages = styled.div`\r\n\r\n`\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {AppStateType} from \"../../app/store/store-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const WithAuthRedirect = <T,>(Component: ComponentType<T>) => {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if(!props.isAuth) return <Navigate to={'/login'}/>\r\n        return <Component {...restProps as T & {}}/>\r\n    }\r\n\r\n\r\n    return connect(mapStateToProps)(RedirectComponent);\r\n};\r\n","import {DialogsPageType, sendMessageAC} from \"../../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../app/store/store-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {WithAuthRedirect} from \"../../../common/hoc/WithAuthRedirect\";\r\nimport {ComponentType} from \"react\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    sendMessage: (newMessage: string) => void\r\n}\r\n\r\nfunction mapStateToProps(state: AppStateType): mapStateToPropsType {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch): mapDispatchToPropsType {\r\n    return {\r\n        sendMessage: (newMessage: string)=>dispatch(sendMessageAC(newMessage))\r\n    }\r\n}\r\n\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs);\r\n"],"names":["DialogsItem","props","id","name","StyledItem","Avatar","img","ava","to","styled","Message","text","StyledMessage","maxLength100","maxLength","FormReduxDialog","reduxForm","form","onSubmit","handleSubmit","Field","component","FormControl","tagName","validate","required","placeholder","style","display","float","dialogsPage","sendMessage","dialogsItems","dialogs","map","d","messages","m","message","StyledDialogs","StyledDialogsNames","StyledMessages","formValues","updateNewMessageBody","mapStateToProps","state","isAuth","auth","compose","connect","dispatch","newMessage","sendMessageAC","Component","restProps","Dialogs"],"sourceRoot":""}